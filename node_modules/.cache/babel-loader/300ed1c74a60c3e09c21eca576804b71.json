{"ast":null,"code":"var _jsxFileName = \"/Users/ritulsoni/Desktop/ramp-fe-challenge/src/components/Transactions/TransactionPane.tsx\";\nimport { InputCheckbox } from \"../InputCheckbox\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const TransactionPane = _ref => {\n  let {\n    transaction,\n    loading,\n    checked,\n    // Add this prop\n    onCheckedChange,\n    // Add this prop\n    setTransactionApproval: consumerSetTransactionApproval\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"RampPane\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"RampPane--content\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"RampText\",\n        children: [transaction.merchant, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"b\", {\n        children: moneyFormatter.format(transaction.amount)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"RampText--hushed RampText--s\",\n        children: [transaction.employee.firstName, \" \", transaction.employee.lastName, \" -\", \" \", transaction.date]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(InputCheckbox, {\n      id: transaction.id,\n      checked: checked // Use the new `checked` prop instead of `transaction.approved`\n      ,\n      disabled: loading,\n      onChange: async newValue => {\n        await consumerSetTransactionApproval({\n          transactionId: transaction.id,\n          newValue\n        });\n        onCheckedChange(); // Call the onCheckedChange prop after updating the transaction approval\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 5\n  }, this);\n};\n_c = TransactionPane;\nconst moneyFormatter = new Intl.NumberFormat(\"en-US\", {\n  style: \"currency\",\n  currency: \"USD\"\n});\n\nvar _c;\n\n$RefreshReg$(_c, \"TransactionPane\");","map":{"version":3,"names":["InputCheckbox","TransactionPane","transaction","loading","checked","onCheckedChange","setTransactionApproval","consumerSetTransactionApproval","merchant","moneyFormatter","format","amount","employee","firstName","lastName","date","id","newValue","transactionId","Intl","NumberFormat","style","currency"],"sources":["/Users/ritulsoni/Desktop/ramp-fe-challenge/src/components/Transactions/TransactionPane.tsx"],"sourcesContent":["import { InputCheckbox } from \"../InputCheckbox\";\nimport { TransactionPaneComponent } from \"./types\";\n\nexport const TransactionPane: TransactionPaneComponent = ({\n  transaction,\n  loading,\n  checked, // Add this prop\n  onCheckedChange, // Add this prop\n  setTransactionApproval: consumerSetTransactionApproval,\n}) => {\n  return (\n    <div className=\"RampPane\">\n      <div className=\"RampPane--content\">\n        <p className=\"RampText\">{transaction.merchant} </p>\n        <b>{moneyFormatter.format(transaction.amount)}</b>\n        <p className=\"RampText--hushed RampText--s\">\n          {transaction.employee.firstName} {transaction.employee.lastName} -{\" \"}\n          {transaction.date}\n        </p>\n      </div>\n      <InputCheckbox\n        id={transaction.id}\n        checked={checked} // Use the new `checked` prop instead of `transaction.approved`\n        disabled={loading}\n        onChange={async (newValue) => {\n          await consumerSetTransactionApproval({\n            transactionId: transaction.id,\n            newValue,\n          });\n          onCheckedChange(); // Call the onCheckedChange prop after updating the transaction approval\n        }}\n      />\n    </div>\n  );\n};\n\nconst moneyFormatter = new Intl.NumberFormat(\"en-US\", {\n  style: \"currency\",\n  currency: \"USD\",\n});"],"mappings":";AAAA,SAASA,aAAT,QAA8B,kBAA9B;;AAGA,OAAO,MAAMC,eAAyC,GAAG,QAMnD;EAAA,IANoD;IACxDC,WADwD;IAExDC,OAFwD;IAGxDC,OAHwD;IAG/C;IACTC,eAJwD;IAIvC;IACjBC,sBAAsB,EAAEC;EALgC,CAMpD;EACJ,oBACE;IAAK,SAAS,EAAC,UAAf;IAAA,wBACE;MAAK,SAAS,EAAC,mBAAf;MAAA,wBACE;QAAG,SAAS,EAAC,UAAb;QAAA,WAAyBL,WAAW,CAACM,QAArC;MAAA;QAAA;QAAA;QAAA;MAAA,QADF,eAEE;QAAA,UAAIC,cAAc,CAACC,MAAf,CAAsBR,WAAW,CAACS,MAAlC;MAAJ;QAAA;QAAA;QAAA;MAAA,QAFF,eAGE;QAAG,SAAS,EAAC,8BAAb;QAAA,WACGT,WAAW,CAACU,QAAZ,CAAqBC,SADxB,OACoCX,WAAW,CAACU,QAAZ,CAAqBE,QADzD,QACqE,GADrE,EAEGZ,WAAW,CAACa,IAFf;MAAA;QAAA;QAAA;QAAA;MAAA,QAHF;IAAA;MAAA;MAAA;MAAA;IAAA,QADF,eASE,QAAC,aAAD;MACE,EAAE,EAAEb,WAAW,CAACc,EADlB;MAEE,OAAO,EAAEZ,OAFX,CAEoB;MAFpB;MAGE,QAAQ,EAAED,OAHZ;MAIE,QAAQ,EAAE,MAAOc,QAAP,IAAoB;QAC5B,MAAMV,8BAA8B,CAAC;UACnCW,aAAa,EAAEhB,WAAW,CAACc,EADQ;UAEnCC;QAFmC,CAAD,CAApC;QAIAZ,eAAe,GALa,CAKT;MACpB;IAVH;MAAA;MAAA;MAAA;IAAA,QATF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAwBD,CA/BM;KAAMJ,e;AAiCb,MAAMQ,cAAc,GAAG,IAAIU,IAAI,CAACC,YAAT,CAAsB,OAAtB,EAA+B;EACpDC,KAAK,EAAE,UAD6C;EAEpDC,QAAQ,EAAE;AAF0C,CAA/B,CAAvB"},"metadata":{},"sourceType":"module"}