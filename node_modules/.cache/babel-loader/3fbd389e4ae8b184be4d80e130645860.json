{"ast":null,"code":"var _jsxFileName = \"/Users/ritulsoni/Desktop/ramp-fe-challenge/src/components/InputSelect/index.tsx\",\n    _s = $RefreshSig$();\n\nimport Downshift from \"downshift\";\nimport { useCallback, useState, useRef } from \"react\";\nimport classNames from \"classnames\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function InputSelect(_ref) {\n  _s();\n\n  let {\n    label,\n    defaultValue,\n    onChange: consumerOnChange,\n    items,\n    parseItem,\n    isLoading,\n    loadingLabel\n  } = _ref;\n  const [selectedValue, setSelectedValue] = useState(defaultValue !== null && defaultValue !== void 0 ? defaultValue : null);\n  const [dropdownPosition, setDropdownPosition] = useState({\n    top: 0,\n    left: 0\n  });\n  const inputRef = useRef(null);\n\n  /*#__PURE__*/\n  _jsxDEV(\"div\", {\n    ref: inputRef,\n    className: \"RampInputSelect--input\",\n    onClick: event => {\n      setDropdownPosition(getDropdownPosition(event.target));\n      toggleProps.onClick(event);\n    },\n    children: inputValue\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 3\n  }, this);\n\n  const onChange = useCallback(selectedItem => {\n    if (selectedItem === null) {\n      return;\n    }\n\n    consumerOnChange(selectedItem);\n    setSelectedValue(selectedItem);\n  }, [consumerOnChange]);\n  return /*#__PURE__*/_jsxDEV(Downshift, {\n    id: \"RampSelect\",\n    onChange: onChange,\n    selectedItem: selectedValue,\n    itemToString: item => item ? parseItem(item).label : \"\",\n    children: _ref2 => {\n      let {\n        getItemProps,\n        getLabelProps,\n        getMenuProps,\n        isOpen,\n        highlightedIndex,\n        selectedItem,\n        getToggleButtonProps,\n        inputValue\n      } = _ref2;\n      const toggleProps = getToggleButtonProps();\n      const parsedSelectedItem = selectedItem === null ? null : parseItem(selectedItem);\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampInputSelect--root\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"RampText--s RampText--hushed\",\n          ...getLabelProps(),\n          children: label\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"RampBreak--xs\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"RampInputSelect--input\",\n          onClick: event => {\n            setDropdownPosition(getDropdownPosition(event.target));\n            toggleProps.onClick(event);\n          },\n          children: inputValue\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classNames(\"RampInputSelect--dropdown-container\", {\n            \"RampInputSelect--dropdown-container-opened\": isOpen\n          }),\n          ...getMenuProps(),\n          style: {\n            top: dropdownPosition.top,\n            left: dropdownPosition.left\n          },\n          children: renderItems()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }, this);\n\n      function renderItems() {\n        if (!isOpen) {\n          return null;\n        }\n\n        if (isLoading) {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"RampInputSelect--dropdown-item\",\n            children: [loadingLabel, \"...\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 20\n          }, this);\n        }\n\n        if (items.length === 0) {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"RampInputSelect--dropdown-item\",\n            children: \"No items\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 20\n          }, this);\n        }\n\n        return items.map((item, index) => {\n          const parsedItem = parseItem(item);\n          return /*#__PURE__*/_jsxDEV(\"div\", { ...getItemProps({\n              key: parsedItem.value,\n              index,\n              item,\n              className: classNames(\"RampInputSelect--dropdown-item\", {\n                \"RampInputSelect--dropdown-item-highlighted\": highlightedIndex === index,\n                \"RampInputSelect--dropdown-item-selected\": (parsedSelectedItem === null || parsedSelectedItem === void 0 ? void 0 : parsedSelectedItem.value) === parsedItem.value\n              })\n            }),\n            children: parsedItem.label\n          }, parsedItem.value, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 15\n          }, this);\n        });\n      }\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n}\n\n_s(InputSelect, \"02TW7Jnv0fC/g1dSA+2ORzqKSJ0=\");\n\n_c = InputSelect;\n\nconst getDropdownPosition = target => {\n  if (target instanceof Element) {\n    const inputElement = inputRef.current;\n\n    if (inputElement) {\n      const {\n        top,\n        left,\n        height\n      } = inputElement.getBoundingClientRect();\n      const {\n        scrollY\n      } = window;\n      return {\n        top: scrollY + top + height,\n        left\n      };\n    }\n  }\n\n  return {\n    top: 0,\n    left: 0\n  };\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"InputSelect\");","map":{"version":3,"names":["Downshift","useCallback","useState","useRef","classNames","InputSelect","label","defaultValue","onChange","consumerOnChange","items","parseItem","isLoading","loadingLabel","selectedValue","setSelectedValue","dropdownPosition","setDropdownPosition","top","left","inputRef","event","getDropdownPosition","target","toggleProps","onClick","inputValue","selectedItem","item","getItemProps","getLabelProps","getMenuProps","isOpen","highlightedIndex","getToggleButtonProps","parsedSelectedItem","renderItems","length","map","index","parsedItem","key","value","className","Element","inputElement","current","height","getBoundingClientRect","scrollY","window"],"sources":["/Users/ritulsoni/Desktop/ramp-fe-challenge/src/components/InputSelect/index.tsx"],"sourcesContent":["import Downshift from \"downshift\"\nimport { useCallback, useState, useRef } from \"react\";\nimport classNames from \"classnames\"\n\nimport { DropdownPosition, GetDropdownPositionFn, InputSelectOnChange, InputSelectProps } from \"./types\"\n\nexport function InputSelect<TItem>({\n  label,\n  defaultValue,\n  onChange: consumerOnChange,\n  items,\n  parseItem,\n  isLoading,\n  loadingLabel,\n}: InputSelectProps<TItem>) {\n  const [selectedValue, setSelectedValue] = useState<TItem | null>(defaultValue ?? null)\n  const [dropdownPosition, setDropdownPosition] = useState<DropdownPosition>({\n    top: 0,\n    left: 0,\n  })\n  const inputRef = useRef(null);\n\n  <div\n    ref={inputRef}\n    className=\"RampInputSelect--input\"\n    onClick={(event) => {\n      setDropdownPosition(getDropdownPosition(event.target));\n      toggleProps.onClick(event);\n    }}\n  >\n    {inputValue}\n  </div>\n  const onChange = useCallback<InputSelectOnChange<TItem>>(\n    (selectedItem) => {\n      if (selectedItem === null) {\n        return\n      }\n\n      consumerOnChange(selectedItem)\n      setSelectedValue(selectedItem)\n    },\n    [consumerOnChange]\n  )\n\n  return (\n    <Downshift<TItem>\n      id=\"RampSelect\"\n      onChange={onChange}\n      selectedItem={selectedValue}\n      itemToString={(item) => (item ? parseItem(item).label : \"\")}\n    >\n      {({\n        getItemProps,\n        getLabelProps,\n        getMenuProps,\n        isOpen,\n        highlightedIndex,\n        selectedItem,\n        getToggleButtonProps,\n        inputValue,\n      }) => {\n        const toggleProps = getToggleButtonProps()\n        const parsedSelectedItem = selectedItem === null ? null : parseItem(selectedItem)\n\n        return (\n          <div className=\"RampInputSelect--root\">\n            <label className=\"RampText--s RampText--hushed\" {...getLabelProps()}>\n              {label}\n            </label>\n            <div className=\"RampBreak--xs\" />\n            <div\n              className=\"RampInputSelect--input\"\n              onClick={(event) => {\n                setDropdownPosition(getDropdownPosition(event.target))\n                toggleProps.onClick(event)\n              }}\n            >\n              {inputValue}\n            </div>\n\n            <div\n              className={classNames(\"RampInputSelect--dropdown-container\", {\n                \"RampInputSelect--dropdown-container-opened\": isOpen,\n              })}\n              {...getMenuProps()}\n              style={{ top: dropdownPosition.top, left: dropdownPosition.left }}\n            >\n              {renderItems()}\n            </div>\n          </div>\n        )\n\n\n\n\n        \n        function renderItems() {\n          if (!isOpen) {\n            return null\n          }\n\n          if (isLoading) {\n            return <div className=\"RampInputSelect--dropdown-item\">{loadingLabel}...</div>\n          }\n\n          if (items.length === 0) {\n            return <div className=\"RampInputSelect--dropdown-item\">No items</div>\n          }\n\n          return items.map((item, index) => {\n            const parsedItem = parseItem(item)\n            return (\n              <div\n                key={parsedItem.value}\n                {...getItemProps({\n                  key: parsedItem.value,\n                  index,\n                  item,\n                  className: classNames(\"RampInputSelect--dropdown-item\", {\n                    \"RampInputSelect--dropdown-item-highlighted\": highlightedIndex === index,\n                    \"RampInputSelect--dropdown-item-selected\":\n                      parsedSelectedItem?.value === parsedItem.value,\n                  }),\n                })}\n              >\n                {parsedItem.label}\n              </div>\n            )\n          })\n        }\n      }}\n    </Downshift>\n  )\n}\n\nconst getDropdownPosition: GetDropdownPositionFn = (target) => {\n  if (target instanceof Element) {\n    const inputElement = inputRef.current;\n    if (inputElement) {\n      const { top, left, height } = inputElement.getBoundingClientRect();\n      const { scrollY } = window;\n      return {\n        top: scrollY + top + height,\n        left,\n      };\n    }\n  }\n\n  return { top: 0, left: 0 };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}