{"ast":null,"code":"var _jsxFileName = \"/Users/ritulsoni/Desktop/ramp-fe-challenge/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport { Fragment, useCallback, useEffect, useMemo, useState } from \"react\";\nimport { InputSelect } from \"./components/InputSelect\";\nimport { Instructions } from \"./components/Instructions\";\nimport { Transactions } from \"./components/Transactions\";\nimport { useEmployees } from \"./hooks/useEmployees\";\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\";\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\";\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function App() {\n  _s();\n\n  const {\n    data: employees,\n    ...employeeUtils\n  } = useEmployees();\n  const {\n    data: paginatedTransactions,\n    ...paginatedTransactionsUtils\n  } = usePaginatedTransactions();\n  const {\n    data: transactionsByEmployee,\n    ...transactionsByEmployeeUtils\n  } = useTransactionsByEmployee(); //bug #5 code for fixing loadstates of employee and transtactions\n\n  const [isLoadingEmployees, setIsLoadingEmployees] = useState(false); // Add this line\n\n  const [isLoadingTransactions, setIsLoadingTransactions] = useState(false); // Add this line\n  // Add this line to store the current employee ID\n\n  const [currentEmployeeId, setCurrentEmployeeId] = useState(EMPTY_EMPLOYEE.id);\n  const [transactionApprovalStates, setTransactionApprovalStates] = useState({});\n\n  const onApprovalToggle = (transactionId, newValue) => {\n    setTransactionApprovalStates(prevState => ({ ...prevState,\n      [transactionId]: newValue\n    }));\n  };\n\n  const transactions = useMemo(() => {\n    var _ref, _paginatedTransaction;\n\n    return (_ref = (_paginatedTransaction = paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.data) !== null && _paginatedTransaction !== void 0 ? _paginatedTransaction : transactionsByEmployee) !== null && _ref !== void 0 ? _ref : null;\n  }, [paginatedTransactions, transactionsByEmployee]);\n  const loadAllTransactions = useCallback(async () => {\n    setIsLoadingEmployees(true);\n    await employeeUtils.fetchAll();\n    setIsLoadingEmployees(false);\n    setIsLoadingTransactions(true);\n    await paginatedTransactionsUtils.fetchAll();\n    setIsLoadingTransactions(false);\n    return paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.data; // Return the fetched transactions here\n  }, [employeeUtils, paginatedTransactionsUtils, paginatedTransactions]); //edited this function to fix bug #3 where the page will crash when you select all employees after selecting a single employee\n\n  const loadTransactionsByEmployee = useCallback(async employeeId => {\n    setCurrentEmployeeId(employeeId); // Add this line to store the current employee ID\n\n    if (employeeId === EMPTY_EMPLOYEE.id) {\n      await loadAllTransactions();\n    } else {\n      paginatedTransactionsUtils.invalidateData();\n      await transactionsByEmployeeUtils.fetchById(employeeId);\n    }\n  }, [paginatedTransactionsUtils, transactionsByEmployeeUtils, loadAllTransactions]);\n  useEffect(() => {\n    if (employees === null && !employeeUtils.loading) {\n      loadAllTransactions().then(transactions => {\n        // Set the initial state of transactionApprovalStates here\n        if (transactions) {\n          const initialTransactionApprovalStates = {};\n          transactions.forEach(transaction => {\n            initialTransactionApprovalStates[transaction.id] = transaction.approved;\n          });\n          setTransactionApprovalStates(initialTransactionApprovalStates);\n        }\n      });\n    }\n  }, [employeeUtils.loading, employees, loadAllTransactions]);\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"MainContainer\",\n      children: [/*#__PURE__*/_jsxDEV(Instructions, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InputSelect, {\n        isLoading: isLoadingEmployees,\n        defaultValue: EMPTY_EMPLOYEE,\n        items: employees === null ? [] : [EMPTY_EMPLOYEE, ...employees],\n        label: \"Filter by employee\",\n        loadingLabel: \"Loading employees\",\n        parseItem: item => ({\n          value: item.id,\n          label: `${item.firstName} ${item.lastName}`\n        }),\n        onChange: async newValue => {\n          if (newValue === null) {\n            return;\n          }\n\n          await loadTransactionsByEmployee(newValue.id);\n        },\n        disabled: paginatedTransactionsUtils.loading // Add this line to disable the InputSelect while loading more data\n\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampGrid\",\n        children: [/*#__PURE__*/_jsxDEV(Transactions, {\n          transactions: transactions,\n          transactionApprovalStates: transactionApprovalStates // Add this line\n          ,\n          onApprovalToggle: onApprovalToggle\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 8\n        }, this), transactions !== null && currentEmployeeId === EMPTY_EMPLOYEE.id && // Replace this condition with the new approach\n        (paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.nextPage) !== null &&\n        /*#__PURE__*/\n        //these fix bug #6\n        _jsxDEV(\"button\", {\n          className: \"RampButton\",\n          disabled: isLoadingTransactions,\n          onClick: async () => {\n            await loadAllTransactions();\n          },\n          children: \"View More\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 8\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"ORh1o+q/QBm0xBB8RhJ3ihZd1ms=\", false, function () {\n  return [useEmployees, usePaginatedTransactions, useTransactionsByEmployee];\n});\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Fragment","useCallback","useEffect","useMemo","useState","InputSelect","Instructions","Transactions","useEmployees","usePaginatedTransactions","useTransactionsByEmployee","EMPTY_EMPLOYEE","App","data","employees","employeeUtils","paginatedTransactions","paginatedTransactionsUtils","transactionsByEmployee","transactionsByEmployeeUtils","isLoadingEmployees","setIsLoadingEmployees","isLoadingTransactions","setIsLoadingTransactions","currentEmployeeId","setCurrentEmployeeId","id","transactionApprovalStates","setTransactionApprovalStates","onApprovalToggle","transactionId","newValue","prevState","transactions","loadAllTransactions","fetchAll","loadTransactionsByEmployee","employeeId","invalidateData","fetchById","loading","then","initialTransactionApprovalStates","forEach","transaction","approved","item","value","label","firstName","lastName","nextPage"],"sources":["/Users/ritulsoni/Desktop/ramp-fe-challenge/src/App.tsx"],"sourcesContent":["import { Fragment, useCallback, useEffect, useMemo, useState } from \"react\"\nimport { InputSelect } from \"./components/InputSelect\"\nimport { Instructions } from \"./components/Instructions\"\nimport { Transactions } from \"./components/Transactions\"\nimport { useEmployees } from \"./hooks/useEmployees\"\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\"\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\"\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\"\nimport { Employee } from \"./utils/types\"\n\nexport function App() {\n  const { data: employees, ...employeeUtils } = useEmployees()\n  const { data: paginatedTransactions, ...paginatedTransactionsUtils } = usePaginatedTransactions()\n  const { data: transactionsByEmployee, ...transactionsByEmployeeUtils } = useTransactionsByEmployee()\n  //bug #5 code for fixing loadstates of employee and transtactions\n  const [isLoadingEmployees, setIsLoadingEmployees] = useState(false) // Add this line\n  const [isLoadingTransactions, setIsLoadingTransactions] = useState(false) // Add this line\n \n  // Add this line to store the current employee ID\n const [currentEmployeeId, setCurrentEmployeeId] = useState(EMPTY_EMPLOYEE.id)\n\n const [transactionApprovalStates, setTransactionApprovalStates] = useState<Record<string, boolean>>({});\n\n \n\n const onApprovalToggle = (transactionId: string, newValue: boolean) => {\n  setTransactionApprovalStates((prevState) => ({\n    ...prevState,\n    [transactionId]: newValue,\n  }));\n};\n\n\n  const transactions = useMemo(\n    () => paginatedTransactions?.data ?? transactionsByEmployee ?? null,\n    [paginatedTransactions, transactionsByEmployee]\n  )\n\n  const loadAllTransactions = useCallback(async () => {\n    setIsLoadingEmployees(true);\n    await employeeUtils.fetchAll();\n    setIsLoadingEmployees(false);\n  \n    setIsLoadingTransactions(true);\n    await paginatedTransactionsUtils.fetchAll();\n    setIsLoadingTransactions(false);\n  \n    return paginatedTransactions?.data; // Return the fetched transactions here\n  }, [employeeUtils, paginatedTransactionsUtils, paginatedTransactions]);\n\n  //edited this function to fix bug #3 where the page will crash when you select all employees after selecting a single employee\n  const loadTransactionsByEmployee = useCallback(\n    async (employeeId: string) => {\n      setCurrentEmployeeId(employeeId); // Add this line to store the current employee ID\n      if (employeeId === EMPTY_EMPLOYEE.id) {\n        await loadAllTransactions()\n      } else {\n        paginatedTransactionsUtils.invalidateData()\n        await transactionsByEmployeeUtils.fetchById(employeeId)\n      }\n    },\n    [paginatedTransactionsUtils, transactionsByEmployeeUtils, loadAllTransactions]\n  )\n\n  useEffect(() => {\n    if (employees === null && !employeeUtils.loading) {\n      loadAllTransactions().then((transactions) => {\n        // Set the initial state of transactionApprovalStates here\n        if (transactions) {\n          const initialTransactionApprovalStates: Record<string, boolean> = {};\n          transactions.forEach((transaction: any) => {\n            initialTransactionApprovalStates[transaction.id] = transaction.approved;\n          });\n          setTransactionApprovalStates(initialTransactionApprovalStates);\n        }\n      });\n    }\n  }, [employeeUtils.loading, employees, loadAllTransactions]);\n\n  return (\n    <Fragment>\n      <main className=\"MainContainer\">\n        <Instructions />\n\n        <hr className=\"RampBreak--l\" />\n\n        <InputSelect<Employee>\n          isLoading={isLoadingEmployees}\n          defaultValue={EMPTY_EMPLOYEE}\n          items={employees === null ? [] : [EMPTY_EMPLOYEE, ...employees]}\n          label=\"Filter by employee\"\n          loadingLabel=\"Loading employees\"\n          parseItem={(item) => ({\n            value: item.id,\n            label: `${item.firstName} ${item.lastName}`,\n          })}\n          onChange={async (newValue) => {\n            if (newValue === null) {\n              return\n            }\n\n            await loadTransactionsByEmployee(newValue.id)\n          }}\n          disabled={paginatedTransactionsUtils.loading} // Add this line to disable the InputSelect while loading more data\n        />\n\n        <div className=\"RampBreak--l\" />\n\n       <div className=\"RampGrid\">\n       <Transactions\n              transactions={transactions}\n              transactionApprovalStates={transactionApprovalStates} // Add this line\n              onApprovalToggle={onApprovalToggle}\n          />\n        {transactions !== null &&\n          currentEmployeeId === EMPTY_EMPLOYEE.id && // Replace this condition with the new approach\n          paginatedTransactions?.nextPage !== null && ( //these fix bug #6\n            <button\n              className=\"RampButton\"\n              disabled={isLoadingTransactions}\n              onClick={async () => {\n                await loadAllTransactions()\n                }}\n              >\n                View More\n              </button>\n            )}\n        </div>\n      </main>\n    </Fragment>\n  )\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}