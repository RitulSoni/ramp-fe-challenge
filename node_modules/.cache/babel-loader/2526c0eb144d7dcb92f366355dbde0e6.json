{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback, useState } from \"react\";\nimport { useCustomFetch } from \"./useCustomFetch\";\nexport function usePaginatedTransactions() {\n  _s();\n\n  const {\n    fetchWithCache,\n    loading\n  } = useCustomFetch();\n  const [paginatedTransactions, setPaginatedTransactions] = useState(null);\n  const fetchAll = useCallback(async () => {\n    const response = await fetchWithCache(\"paginatedTransactions\", {\n      page: paginatedTransactions === null ? 0 : paginatedTransactions.nextPage\n    });\n\n    if (response) {\n      // Add the approved property to each transaction\n      const transactionsWithApproval = response.data.map(transaction => ({ ...transaction,\n        approved: true\n      }));\n      setPaginatedTransactions(previousResponse => {\n        if (previousResponse === null) {\n          return {\n            data: transactionsWithApproval,\n            nextPage: response.nextPage\n          };\n        } // Concatenate the old and new transactions together\n\n\n        return {\n          data: [...previousResponse.data, ...transactionsWithApproval],\n          nextPage: response.nextPage\n        };\n      });\n    }\n  }, [fetchWithCache, paginatedTransactions]);\n  const invalidateData = useCallback(() => {\n    setPaginatedTransactions(null);\n  }, []);\n  return {\n    data: paginatedTransactions,\n    loading,\n    fetchAll,\n    invalidateData\n  };\n}\n\n_s(usePaginatedTransactions, \"5C7xQHueO9nKLl+7c12EAAA+DoA=\", false, function () {\n  return [useCustomFetch];\n});","map":{"version":3,"names":["useCallback","useState","useCustomFetch","usePaginatedTransactions","fetchWithCache","loading","paginatedTransactions","setPaginatedTransactions","fetchAll","response","page","nextPage","transactionsWithApproval","data","map","transaction","approved","previousResponse","invalidateData"],"sources":["/Users/ritulsoni/Desktop/ramp-fe-challenge/src/hooks/usePaginatedTransactions.ts"],"sourcesContent":["import { useCallback, useState } from \"react\"\nimport { PaginatedRequestParams, PaginatedResponse, Transaction } from \"../utils/types\"\nimport { PaginatedTransactionsResult } from \"./types\"\nimport { useCustomFetch } from \"./useCustomFetch\"\n\nexport function usePaginatedTransactions(): PaginatedTransactionsResult {\n  const { fetchWithCache, loading } = useCustomFetch()\n  const [paginatedTransactions, setPaginatedTransactions] = useState<PaginatedResponse<\n    Transaction[]\n  > | null>(null)\n\n  const fetchAll = useCallback(async () => {\n    const response = await fetchWithCache<PaginatedResponse<Transaction[]>, PaginatedRequestParams>(\n      \"paginatedTransactions\",\n      {\n        page: paginatedTransactions === null ? 0 : paginatedTransactions.nextPage,\n      }\n    );\n  \n    if (response) {\n      // Add the approved property to each transaction\n      const transactionsWithApproval = response.data.map(transaction => ({\n        ...transaction,\n        approved: true\n      }));\n  \n      setPaginatedTransactions((previousResponse) => {\n        if (previousResponse === null) {\n          return {\n            data: transactionsWithApproval,\n            nextPage: response.nextPage,\n          };\n        }\n  \n        // Concatenate the old and new transactions together\n        return {\n          data: [...previousResponse.data, ...transactionsWithApproval],\n          nextPage: response.nextPage,\n        };\n      });\n    }\n  }, [fetchWithCache, paginatedTransactions]);\n\n  const invalidateData = useCallback(() => {\n    setPaginatedTransactions(null)\n  }, [])\n\n  return { data: paginatedTransactions, loading, fetchAll, invalidateData }\n}"],"mappings":";;AAAA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,OAAtC;AAGA,SAASC,cAAT,QAA+B,kBAA/B;AAEA,OAAO,SAASC,wBAAT,GAAiE;EAAA;;EACtE,MAAM;IAAEC,cAAF;IAAkBC;EAAlB,IAA8BH,cAAc,EAAlD;EACA,MAAM,CAACI,qBAAD,EAAwBC,wBAAxB,IAAoDN,QAAQ,CAExD,IAFwD,CAAlE;EAIA,MAAMO,QAAQ,GAAGR,WAAW,CAAC,YAAY;IACvC,MAAMS,QAAQ,GAAG,MAAML,cAAc,CACnC,uBADmC,EAEnC;MACEM,IAAI,EAAEJ,qBAAqB,KAAK,IAA1B,GAAiC,CAAjC,GAAqCA,qBAAqB,CAACK;IADnE,CAFmC,CAArC;;IAOA,IAAIF,QAAJ,EAAc;MACZ;MACA,MAAMG,wBAAwB,GAAGH,QAAQ,CAACI,IAAT,CAAcC,GAAd,CAAkBC,WAAW,KAAK,EACjE,GAAGA,WAD8D;QAEjEC,QAAQ,EAAE;MAFuD,CAAL,CAA7B,CAAjC;MAKAT,wBAAwB,CAAEU,gBAAD,IAAsB;QAC7C,IAAIA,gBAAgB,KAAK,IAAzB,EAA+B;UAC7B,OAAO;YACLJ,IAAI,EAAED,wBADD;YAELD,QAAQ,EAAEF,QAAQ,CAACE;UAFd,CAAP;QAID,CAN4C,CAQ7C;;;QACA,OAAO;UACLE,IAAI,EAAE,CAAC,GAAGI,gBAAgB,CAACJ,IAArB,EAA2B,GAAGD,wBAA9B,CADD;UAELD,QAAQ,EAAEF,QAAQ,CAACE;QAFd,CAAP;MAID,CAbuB,CAAxB;IAcD;EACF,CA9B2B,EA8BzB,CAACP,cAAD,EAAiBE,qBAAjB,CA9ByB,CAA5B;EAgCA,MAAMY,cAAc,GAAGlB,WAAW,CAAC,MAAM;IACvCO,wBAAwB,CAAC,IAAD,CAAxB;EACD,CAFiC,EAE/B,EAF+B,CAAlC;EAIA,OAAO;IAAEM,IAAI,EAAEP,qBAAR;IAA+BD,OAA/B;IAAwCG,QAAxC;IAAkDU;EAAlD,CAAP;AACD;;GA3Cef,wB;UACsBD,c"},"metadata":{},"sourceType":"module"}